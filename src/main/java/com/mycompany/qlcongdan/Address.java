/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.qlcongdan;

import java.time.LocalDate;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.neo4j.driver.Result;
import org.neo4j.driver.types.Node;

/**
 *
 * @author PC
 */
public class Address extends javax.swing.JFrame {
    Neo4jConnection connect;
    String id="C001";
    /**
     * Creates new form Address
     */
    public Address(String idUser) {
        this.id=idUser;
        initComponents();
        connect=new Neo4jConnection();
        loadAddress();
    }
    public Address() {
        initComponents();
        connect=new Neo4jConnection();
        loadAddress();
    }
    public void loadAddress(){
        DefaultTableModel model = (DefaultTableModel) tblAddress.getModel();
        model.setRowCount(0);
        try (var session = connect.getSession()) {
            // Thực hiện truy vấn và xử lý kết quả
            Result result = session.run("MATCH (c:Citizen)-[r:LIVES_AT]->(a:Address)" +
                                        "WHERE c.id = '"+this.id+"'" +
                                        "RETURN r.move_in_date, a");
            while (result.hasNext()) {
                org.neo4j.driver.Record record = result.next();
                Node address = record.get("a").asNode();
                String address_id = address.get("address_id").asString();
                String city = address.get("city").asString();
                String country = address.get("country").asString();
                String street = address.get("street").asString();
                String live_at = record.get("r.move_in_date").asString();

                model.addRow(new Object[]{address_id, city, country, street, live_at});
            }
        } catch (Exception e) {
            e.printStackTrace(); // Ghi lại bất kỳ lỗi nào
        }
    }
    private boolean isValidAddress(String addressId, String street, String city, String country) {
    if (addressId == null || addressId.isEmpty() ||
        street == null || street.isEmpty() ||
        city == null || city.isEmpty() ||
        country == null || country.isEmpty()) {
        return false;
    }
    return true;
}
    private boolean isAddressIdExists(String addressId) {
        try (var session = connect.getSession()) {
            var result = session.run("MATCH (a:Address {address_id: $addressId}) RETURN a",
                                      org.neo4j.driver.Values.parameters("addressId", addressId));
            return result.hasNext();
        } catch (Exception e) {
            e.printStackTrace();
            return false; 
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtIdAddress = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtCountry = new javax.swing.JTextField();
        txtStreet = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtLiveAt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAddress = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Id address");

        jLabel2.setText("City");

        jLabel3.setText("Country");

        jLabel6.setText("Street");

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jLabel7.setText("Live at");

        tblAddress.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id Address", "City", "Country", "Street", "Live at"
            }
        ));
        tblAddress.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAddressMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAddress);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(40, 40, 40)
                        .addComponent(txtLiveAt, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2)
                        .addComponent(jLabel3)
                        .addComponent(jLabel6))
                    .addGap(21, 21, 21)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtStreet)
                        .addComponent(txtCity)
                        .addComponent(txtIdAddress)
                        .addComponent(txtCountry))
                    .addGap(149, 149, 149)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAdd)
                .addGap(12, 12, 12)
                .addComponent(btnUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDelete)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLiveAt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtIdAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(txtStreet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(237, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        String addressId=txtIdAddress.getText();
        if ( addressId == null || addressId.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Dữ liệu không hợp lệ!");
            return;
        }

    try (var session = connect.getSession()) {
        session.run("MATCH (c:Citizen {id: $citizenId})-[r:LIVES_AT]->(a:Address {address_id: $addressId}) " +
                    "DELETE r, a",
                    org.neo4j.driver.Values.parameters("citizenId", this.id,
                                     "addressId", addressId));
        JOptionPane.showMessageDialog(null, "Xoá địa chỉ thành công!");
        loadAddress();
    } catch (Exception e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        String addressId=txtIdAddress.getText(),newStreet=txtStreet.getText(), newCity=txtCity.getText(), newCountry=txtCountry.getText();
        if (!isValidAddress(addressId, newStreet, newCity, newCountry)) {
            JOptionPane.showMessageDialog(null, "Dữ liệu không hợp lệ!");
            return;
        }

        try (var session = connect.getSession()) {
            session.run("MATCH (c:Citizen {id: $citizenId})-[r:LIVES_AT]->(a:Address {address_id: $addressId}) " +
                        "SET a.street = $newStreet, a.city = $newCity, a.country = $newCountry, r.move_in_date = $moveInDate",
                        org.neo4j.driver.Values.parameters("citizenId", this.id,
                                         "addressId", addressId,
                                         "newStreet", newStreet,
                                         "newCity", newCity,
                                         "newCountry", newCountry,
                                         "moveInDate", txtLiveAt.getText()==null?LocalDate.now():txtLiveAt.getText()));
            JOptionPane.showMessageDialog(null, "Thêm địa chỉ thành công!");
            loadAddress();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String addressId=txtIdAddress.getText(),street=txtStreet.getText(), city=txtCity.getText(), country=txtCountry.getText();
        if (!isValidAddress(addressId, street, city, country)) {
            JOptionPane.showMessageDialog(null, "Dữ liệu không hợp lệ!");
            return;
        }

        if (isAddressIdExists(addressId)) {
            JOptionPane.showMessageDialog(null, "Địa chỉ đã tồn tại với address_id: " + addressId);
            return;
        }

        try (var session = connect.getSession()) {
            session.run("MATCH (c:Citizen {id: $citizenId}) " +
                        "CREATE (c)-[:LIVES_AT {move_in_date: $moveInDate}]->(a:Address {address_id: $addressId, street: $street, city: $city, country: $country})",
                        org.neo4j.driver.Values.parameters("citizenId", this.id,
                                         "addressId", addressId,
                                         "street", street,
                                         "city", city,
                                         "country", country,
                                         "moveInDate", txtLiveAt.getText()==null?LocalDate.now():txtLiveAt.getText()));
            loadAddress();
            JOptionPane.showMessageDialog(null, "Thêm địa chỉ thành công!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void tblAddressMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAddressMouseClicked
        int index=tblAddress.getSelectedRow();
        txtIdAddress.setText(tblAddress.getValueAt(index, 0).toString());
        txtCity.setText(tblAddress.getValueAt(index, 1).toString());
        txtCountry.setText(tblAddress.getValueAt(index, 2).toString());
        txtStreet.setText(tblAddress.getValueAt(index, 3).toString());
        txtLiveAt.setText(tblAddress.getValueAt(index, 4).toString());
    }//GEN-LAST:event_tblAddressMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Address.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Address.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Address.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Address.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Address().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblAddress;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtCountry;
    private javax.swing.JTextField txtIdAddress;
    private javax.swing.JTextField txtLiveAt;
    private javax.swing.JTextField txtStreet;
    // End of variables declaration//GEN-END:variables
}
